@SuppressWarnings("unchecked")
public class Array <T> implements Iterable <T>{
    private T [] arr;
    private int len = 0; // length user thinks array is
    private int capacity = 0; //actual array size
    
    public Array() {this(16);} //To implement array of capacity 16
    
    public Array(int capacity) {
        if(capacity < 0) 
        {
            throw new IllegalArgumentException("Illegal Caapcity: " + capacity);
            
        }
        this.capacity = capacity;
        arr = (t[]) new Object[capacity];
    }
    
    public int size(){
        return len;
    }
    
    public boolean isEmpty(){
        return size() == 0
    }
    
    public T get(int index){
        return arr[index];
    }
    
    public void set(int index, T elem){
        arr[index] = elem;
    }
    
    public void clear() {
        for(int i =0; i< capacity; i++)
        {
            arr[i] = null;
        }
        len = 0;
    }
    
    public void add(T elem)
    {
        if(len + 1 >= Capacity) //Time to resize
        
        if(capacity == 0) return 1;
        
        else capacity *= 2;
        
        T[] newArr = (T[]) new Object[capacity]
        
        for(int i = 0; i < n ; i++)
        {
            newArr[i] = arr[i];
        }
        
        arr = newArr;
        
        arr[len++] = elem;
    }
    
    public T removeAt(int rm_index)
    {
        if(rm_index < 0 || rm_index>= len) 
        {
            throw new IndexOutOfBoundsException();
        }
        T data = arr[rm_index];
        t[] newArr = (T[]) Object [len-1];
        for(int i = 0, j = 0; i <len ; i++, j++ )
        {
            if(i = rm_index)
            {
                j--;
            }
            else
            {
                newArr[j] = arr[i];
            }
        }
        arr = newArr;
        capacity = --len;
        return data;
    }
    
    public bool remove(Object obj)
    {
        for(int i = 0; i < len; i++)
        {
            if (arr[i].equals(obj))
            {
                removeAt(i);
                return true;
            }
        }
        return false;
    }
    
    public int indexOf(Object obj)
    {
        for(int i = 0; i < len; i++)
        {
            if (arr[i].equals(obj))
            {
                return i;
            }
        }
        return -1;
    }
    
    public bool contains(Object obj)
    {
        return indexOf(obj) != -1;
    }
    
    //Iterator is still fast but not as fast as iterative for loop
    @Override public java.util.Iterator <T> iterator () {
        return new java.util.Iterator <T> () {
            int index = 0;
            public boolean hasNext() {
                return index< len;
            }
            
        }
    }
    
    @Override public String toString() {
        if (len == 0) return "[]";
        else {
            StringBuilder sb = new StringBuilder(len).append("[");
            for(int i = 0 ; i < len -1 ; i++)
            {
                sb.append(arr[i] + ",");
            }
            return sb.append(arr[len-1] + ",").toString();
        }
    }
    
